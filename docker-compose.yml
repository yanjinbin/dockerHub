version: "3.7"
networks:
  mynetwork:
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24
services:
  # Kafka web UI
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:b0583a3ca7d58bd9978e26a67bb8927fcbf03c42
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: "My Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "PLAINTEXT://kafka:9092"
    volumes:
      - ./service/kafka-ui/config.yaml:/app/config/kafka-clusters.yaml
    networks:
      mynetwork:
        ipv4_address: 192.168.1.2

  # ZooKeeper component for Kafka
  zookeeper:
    container_name: cp-zk-7.5
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      mynetwork:
        ipv4_address: 192.168.1.3

  # Confluent Kafka
  kafka:
    container_name: cp-kafka-7.5
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - "./service/kafka/docker.sock:/var/run/docker.sock"
      - "./service/kafka/:/kafka"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      mynetwork:
        ipv4_address: 192.168.1.4
  mysql_v8:
    container_name: mysql_v8
    image: mysql:8.0.32
    environment:
      MYSQL_ROOT_PASSWORD: '123456'
    env_file:
      - ./service/mysql/env/mysql.env
    expose:
      - '3306'
    ports:
      - '3306:3306'
    volumes:
      # mysql 配置文件
      - ./service/mysql/my.cnf:/etc/mysql/my.cnf
      # 数据挂载
      - ./data/mysql:/var/lib/mysql
      # 初始化
      - ./service/mysql/init:/docker-entrypoint-initdb.d
    command: [ "mysqld",
               "--default-authentication-plugin=mysql_native_password",
               "--character-set-server=utf8mb4",
               "--collation-server=utf8mb4_unicode_ci" ]
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      mynetwork:
        ipv4_address: 192.168.1.5

  #  mysql-v8:
  #    container_name: MySQLV8
  #    build:
  #      context: ./service/mysql
  #      dockerfile: Dockerfile
  #    expose:
  #      - 3306
  #    ports:
  #      - 3306:3306
  #    environment:
  #      - TZ=Asia/Shanghai
  #      - MYSQL_ROOT_PASSWORD=123456
  #      - MYSQL_USER=test_01
  #      - MYSQL_PASSWORD=123456
  #    volumes:
  #      # 数据挂载
  #      - ./data/mysql:/var/lib/mysql-data/:rw
  #      # 配置挂载
  #      - ./service/mysql/my.cnf:/etc/mysql/my.cnf
  #      # 初始化脚本
  #      - ./service/mysql/init:/docker-entrypoint-initdb.d/
  #      # 初始化sql脚本存放位置
  #      - ./service/mysql/sql:/opt/sql
  #    command:
  #      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
  #      --default-authentication-plugin=mysql_native_password
  #    networks:
  #      mynetwork:
  #        ipv4_address: 192.168.1.5
  # =====  mysql v8 版本配置 end ====

  # ===== mongodb start =====
  mongo_6:
    container_name: mongo_v6
    build:
      context: service/mongodb-standalone
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    volumes:
      - ./service/mongodb-standalone/mongod.conf:/etc/mongod.conf
      - ./data/mongodb:/data/db:rw
    command: mongod -f /etc/mongod.conf
    networks:
      mynetwork:
        ipv4_address: 192.168.1.6
  # ===== mongodb end =====

  # =====  redis v5 版本配置 start ====
  redis_5:
    container_name: redis_v5
    build:
      context: ./service/redis
      dockerfile: Dockerfile
    expose:
      - 6379
    ports:
      - 6379:6379
    volumes:
      - ./service/redis/redis.conf:/etc/redis.conf:ro
      - ./data/redis:/data/:rw
    restart: on-failure
    cap_add:
      - SYS_PTRACE
      - NET_ADMIN
    tty: true
    environment:
      - TZ=Asia/Shanghai
    entrypoint: [ "redis-server", "/etc/redis.conf" ]
    networks:
      mynetwork:
        ipv4_address: 192.168.1.7
  # =====  redis v5 版本配置 end ====

  # =====  postgres v12 版本配置 start ====
  postgres_12:
    container_name: postgres_v12
    image: postgres:12.16
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
    ports:
      - 5432:5432
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    networks:
      mynetwork:
        ipv4_address: 192.168.1.8
  # =====  postgres v12 版本配置 end ====
  xxl-job-arm:
    container_name: xxl-job-arm_v2.4.0
    image: kuschzzp/xxl-job-aarch64:2.4.0
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql_v8:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=UTC"
      SPRING_DATASOURCE_USERNAME: "test_01"
      SPRING_DATASOURCE_PASSWORD: "123456"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "com.mysql.cj.jdbc.Driver"
    ports:
      - 9056:8080
    volumes:
      - ./log/xxljobLogs:/data/applogs
    depends_on:
      - mysql_v8
    networks:
      mynetwork:
        ipv4_address: 192.168.1.9

  # ====  xxl-job end  =====
  nacos:
    image: nacos/nacos-server:v2.2.3-slim
    container_name: nacos_standalone_v2
    env_file:
      - ./service/nacos/env/nacos-standlone-mysql.env
    volumes:
      - ./log/nacos/standalone-logs/:/home/nacos/logs
    ports:
      - "8848:8848"
      - "9848:9848"
    depends_on:
      mysql_v8:
        condition: service_healthy
    networks:
      mynetwork:
        ipv4_address: 192.168.1.10
